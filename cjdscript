#!/bin/bash

_CJDSCRIPT_HOME="${HOME}/.cjdscript"
_CJDNS_REPO="https://github.com/cjdelisle/cjdns.git"

_BASH_SCRIPTS=('ip6tables.sh')
_BINARIES=('benc2json' 'cleanconfig' 'dnsserv' 'makekeys' 'privatetopublic' 'publictoip6' 'sybilsim')
_NODEJS_SCRIPTS=('dumptable.js' 'getLinks.js' 'peerStats.js')
_PYTHON2_SCRIPTS=('cjdnsadmin' 'cjdnsadminmaker.py' 'cjdnslog' 'dumptable' 'dynamicEndpoints.py' 'findnodes' 'getLinks' 'ip6topk' 'peerStats' 'pingAll.py' 'pktoip6' 'sessionStats' 'trashroutes')

function test_bin {
    if [ ! -f "${_CJDSCRIPT_HOME}/bin/${1}" ]; then return 1; fi
}

function setup_bash {
    _BASH_TESTPATH=$(type -p bash)
    if [ ! -z "${_BASH_TESTPATH}" ]; then
        ln -f -s "${_BASH_TESTPATH}" "${_CJDSCRIPT_HOME}/bin/bash$("${_BASH_TESTPATH}" -V 2>&1 | sed 's/^[^0-9]*//;s/\..*//')"
    fi

    test_bin "bash"
    if [ ! $? = "1" ]; then
        ln -f -s "${HOME}/.cjdscript"/bin/bash "${HOME}/.cjdscript/bin/sh"
        ln -f -s "${HOME}/.cjdscript"/bin/bash "${HOME}/.cjdscript/bin/sh -e"
        for _BASH_SCRIPTNAME in ${_BASH_SCRIPTS[@]}; do
            ln -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/bash/${_BASH_SCRIPTNAME}" .
        done
    fi
}

function setup_binaries {
    test_bin "python"
    if [ ! $? = "1" ]; then
        type node >/dev/null 2>&1 || (echo "Node.js is required to build binaries" && return 1)
        sh -c "cd ${_CJDSCRIPT_HOME}/download/cjdns; ./clean"
        PATH="${_CJDSCRIPT_HOME}/bin:${PATH}" sh -c "cd ${_CJDSCRIPT_HOME}/download/cjdns; ./do"

        for _BINARY in ${_BINARIES[@]}; do
            if [ -f "${_CJDSCRIPT_HOME}/download/cjdns/${_BINARY}" ]; then
                ln -s "${_CJDSCRIPT_HOME}/download/cjdns/${_BINARY}" .
            fi
        done
    else
        echo "Python is required to build binaries"
    fi
}

function setup_node {
    type node >/dev/null 2>&1 || return 1

    for _SCRIPT in ${_NODEJS_SCRIPTS[@]}; do
        if [ -f "${_CJDSCRIPT_HOME}/download/cjdns/contrib/nodejs/tools/${_SCRIPT}" ]; then
            ln -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/nodejs/tools/${_SCRIPT}" .
        fi
    done
}

function setup_python {
    #CREATE LOCAL LINKS TO PYTHON VERSIONS WITH NAMES STANDARD TO THIS SCRIPT
    _PYTHON_BINARYNAMES=('python' 'python2' 'python3')
    for _PYTHON_TESTNAME in ${_PYTHON_BINARYNAMES[@]}; do
        _PYTHON_TESTPATH=$(type -p $_PYTHON_TESTNAME)
        if [ ! -z "${_PYTHON_TESTPATH}" ]; then
            ln -f -s "${_PYTHON_TESTPATH}" "${_CJDSCRIPT_HOME}/bin/python$("${_PYTHON_TESTPATH}" -V 2>&1 | sed 's/^[^0-9]*//;s/\..*//')"
        fi
    done

    #PYTHON2 (ONLY RUN IF PYTHON2 EXISTS)
    test_bin "python2"
    if [ ! $? = "1" ]; then
        ln -f -s "${HOME}/.cjdscript"/bin/python2 "${HOME}/.cjdscript"/bin/python
        for _PYTHON2_SCRIPTNAME in ${_PYTHON2_SCRIPTS[@]}; do
            ln -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/python/${_PYTHON2_SCRIPTNAME}" .
        done
    fi

    #PYTHON3 (ONLY RUN IF PYTHON3 EXISTS) - (SINCE THERE ARE NO PYTHON3 SCRIPTS ATM, THIS SIMPLY TRIGGERS ITS REMOVAL)
    test_bin "python3"
    if [ ! $? = "1" ]; then
        rm "${_CJDSCRIPT_HOME}/bin/python3"
    fi
}

function setup_scripts {
    if [ ! -d "${_CJDSCRIPT_HOME}/download" ]; then mkdir -p "${_CJDSCRIPT_HOME}/download"; fi
    if [ ! -d "${_CJDSCRIPT_HOME}/download/cjdns" ]; then
        cd "${_CJDSCRIPT_HOME}/download"
        git clone "${_CJDNS_REPO}"
    else
        cd "${_CJDSCRIPT_HOME}/download/cjdns"
        git pull
    fi

    mkdir -p "${_CJDSCRIPT_HOME}/bin" && cd "${_CJDSCRIPT_HOME}/bin" || exit 1
    setup_bash
    setup_node
    setup_python
    setup_binaries

    echo -e "\nThe cjdscript configuration directory @ ${_CJDSCRIPT_HOME} has been configured."
    echo -e "Ensure cjdns is installed and running before using cjdscript with the following syntax:\n"
    cjdscript_help
}

function list_scripts {
    echo "Available Scripts:"

    #BASH
    test_bin "bash"
    if [ ! $? = "1" ]; then
        for _BASH_SCRIPTNAME in ${_BASH_SCRIPTS[@]}; do
            echo -e "\t\t${_BASH_SCRIPTNAME}"
        done
    fi

    #NODEJS
    for _NODEJS_SCRIPTNAME in ${_NODEJS_SCRIPTS[@]}; do
        test_bin "$_NODEJS_SCRIPTNAME"
        if [ ! $? = "1" ]; then
            echo -e "\t\t${_NODEJS_SCRIPTNAME}"
        fi
    done

    #PYTHON2
    test_bin "python2"
    if [ ! $? = "1" ]; then
        for _PYTHON2_SCRIPTNAME in ${_PYTHON2_SCRIPTS[@]}; do
            echo -e "\t\t${_PYTHON2_SCRIPTNAME}"
        done
    fi

    #BINARIES
    for _BINARY in ${_BINARIES[@]}; do
        test_bin "$_BINARY"
        if [ ! $? = "1" ]; then
            echo -e "\t\t${_BINARY}"
        fi
    done
}

function cjdscript_help {
    echo -e "Usage: 'cjdscript argument' --or-- 'cjdscript scriptname argument(s)'\n"
    echo "Arguments:"
    echo -e "\t-h or --help: Show this help"
    echo -e "\t-u or --update: Updates scripts and symlinks"
    echo -e "\t-l or --list: Lists available scripts\n"
    list_scripts
}

#STARTUP
if [ "${1}" == "--update" -o "${1}" == "-u" ]; then
    rm -rf "${_CJDSCRIPT_HOME}/bin"
    setup_scripts
elif [ "${1}" == "--list" -o "${1}" == "-l" ]; then
    list_scripts
elif [ "${1}" == "--help" -o "${1}" == "-h" -o -z "${1}" ]; then
    cjdscript_help
elif [ ! -d "${_CJDSCRIPT_HOME}/bin" ]; then
    setup_scripts
elif [ ! -z "${1}" -a $(echo "${1}" | grep -E -c "^-") = 0 ]; then
    test_bin "${1}"
    if [ ! $? = "1" ]; then
        PATH="${_CJDSCRIPT_HOME}/bin:${PATH}"
        "$@"
    else
        echo -e "Missing Script Error: \"${1}\" does not exist\n"
        cjdscript_help
    fi
else
    echo -e "Syntax Error: \"$@\" is not a valid argument\n"
    cjdscript_help
fi
