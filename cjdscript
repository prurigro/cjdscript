#!/usr/bin/env bash

# CJDSCRIPT ROOT FOLDER: CONTAINS EVERYTHING CJDSCRIPT DOWNLOADS AND INSTALLS
_CJDSCRIPT_HOME="${HOME}/.cjdscript"

# URL TO GRAB THE CJDNS GIT REPO FROM
_CJDNS_REPO="https://github.com/cjdelisle/cjdns.git"

# DIRECTORY VERSION: USED TO TRIGGER UPDATES WHEN THE CONTENTS OF _CJDSCRIPT_HOME CHANGE
_DIRVERSION="4"

# INCLUDED SCRIPTS, BY LANGUAGE
_BASH_SCRIPTS=('cjdroid-build.sh' 'ip6tables.sh' 'run-cjdroute.bash')
_BINARIES=('cjdroute' 'makekeys' 'privatetopublic' 'publictoip6' 'sybilsim')
_NODEJS_SCRIPTS=('dumptable.js' 'getLinks.js' 'netwalker.js' 'pathfinderTree.js' 'peerStats.js' 'pingAll.js' 'pingflood.js')
_PYTHON2_SCRIPTS=('cjdnsadminmaker.py' 'cjdnslog' 'drawgraph' 'dumpgraph' 'dumptable' 'dynamicEndpoints.py' 'findnodes' 'graphStats' 'peerStats' 'pingAll.py' 'pktoip6' 'searches' 'sessionStats' 'trashroutes')

# USED TO SILENCE OUTPUT UNLESS THE VERBOSE OPTION IS USED
QUIET=">/dev/null 2>&1"

# HOLDS THE NAME OF THE SCRIPT, DYNAMIC SO EVERYTHING STAYS CORRECT IF SOMEONE USES A DIFFERENT FILENAME
APPNAME="${0##*/}"

# EXPORT PATH VARIABLES WITH CJDSCRIPT LOCATIONS INCLUDED
export PATH="${_CJDSCRIPT_HOME}/bin:${PATH}"
export PYTHONPATH="${_CJDSCRIPT_HOME}/lib/python2.7/site-packages/"

# PYTHON2 SETUP FUNCTION (triggered by setup_scripts)
function setup_python2 {
    _PYTHON2_BINPATH=$(type -P python2)
    [[ -z "$_PYTHON2_BINPATH" ]] && _PYTHON2_BINPATH=$(type -P python2.7)
    if [ -n "$_PYTHON2_BINPATH" ]; then
        # SETUP PYTHON2 LINKS AND LIB DIRECTORY
        ln -f -s "$_PYTHON2_BINPATH" "${_CJDSCRIPT_HOME}/bin/python"
        ln -f -s "$_PYTHON2_BINPATH" "${_CJDSCRIPT_HOME}/bin/python2"
        ln -f -s "$_PYTHON2_BINPATH" "${_CJDSCRIPT_HOME}/bin/python2.7"
        install -d "$PYTHONPATH"

        # INSTALL CJDNS PYTHON2 LIBRARIES
        echo "==> Setting up python2 library: cjdnsadmin"
        ln -f -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/python/cjdnsadmin" "${PYTHONPATH}/cjdnsadmin"

        # INSTALL THIRD PARTY LIBRARIES
        cd "${_CJDSCRIPT_HOME}/download"

        echo "==> Downloading python2 library: setuptools"
        [[ -d setuptools ]] && rm -rf setuptools
        wget -q -O - https://pypi.python.org/packages/source/s/setuptools/setuptools-5.7.tar.gz | tar -xz
        mv setuptools* setuptools
        if [ -d setuptools ]; then
            echo "==> Installing python2 library: setuptools"
            cd setuptools
            eval "$_PYTHON2_BINPATH" setup.py install --prefix="$_CJDSCRIPT_HOME" $QUIET
            cd "${_CJDSCRIPT_HOME}/download"
            rm -rf setuptools

            echo "==> Downloading python2 library: networkx"
            [[ -d networkx ]] && rm -rf networkx
            wget -q -O - https://pypi.python.org/packages/source/n/networkx/networkx-1.9.tar.gz | tar -xz
            mv networkx* networkx
            if [ -d networkx ]; then
                echo "==> Installing python2 library: networkx"
                cd networkx
                eval "$_PYTHON2_BINPATH" setup.py install --prefix="$_CJDSCRIPT_HOME" $QUIET
                cd "${_CJDSCRIPT_HOME}/download"
                rm -rf networkx
            else
                echo "==> Warning: networkx did not install correctly"
            fi
        else
            echo "==> Warning: setuptools and networkx did not install correctly"
        fi

        echo "==> Installing python2 library: matplotlib"
        [[ -d matplotlib ]] && rm -rf matplotlib
        wget -q -O - https://downloads.sourceforge.net/project/matplotlib/matplotlib/matplotlib-1.4.0/matplotlib-1.4.0.tar.gz | tar -xz
        mv matplotlib* matplotlib
        if [ -d matplotlib ]; then
            cd matplotlib
            eval "$_PYTHON2_BINPATH" setup.py build $QUIET
            eval "$_PYTHON2_BINPATH" setup.py install --prefix="$_CJDSCRIPT_HOME" $QUIET
            cd "${_CJDSCRIPT_HOME}/download"
            rm -rf matplotlib
        else
            echo "==> Warning: matplotlib did not install correctly"
        fi

        echo "==> Installing python2 library: numpy"
        [[ -d numpy ]] && rm -rf numpy
        wget -q -O - http://downloads.sourceforge.net/project/numpy/NumPy/1.8.1/numpy-1.8.1.tar.gz | tar -xz
        mv numpy* numpy
        if [ -d numpy ]; then
            cd numpy
            eval "$_PYTHON2_BINPATH" setup.py build $QUIET
            eval "$_PYTHON2_BINPATH" setup.py install --prefix="$_CJDSCRIPT_HOME" $QUIET
            cd "${_CJDSCRIPT_HOME}/download"
            rm -rf numpy
        else
            echo "==> Warning: numpy did not install correctly"
        fi

        # INSTALL PYTHON2 SCRIPTS
        echo "==> Installing python2 scripts..."
        cd "${_CJDSCRIPT_HOME}/bin"
        for _PYTHON2_SCRIPTNAME in ${_PYTHON2_SCRIPTS[@]}; do
            [[ -f "${_CJDSCRIPT_HOME}/download/cjdns/contrib/python/${_PYTHON2_SCRIPTNAME}" ]] \
                && ln -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/python/${_PYTHON2_SCRIPTNAME}" . \
                || echo "==> Warning: ${_PYTHON2_SCRIPTNAME} does not exist and won't be installed"
        done
    else
        echo "==> Warning: Not including python2 scripts (python2 is not available)"
    fi
}

# BASH SETUP FUNCTION (triggered by setup_scripts)
function setup_bash {
    _BASH_BINPATH=$(type -P bash)
    if [[ -n "$_BASH_BINPATH" ]]; then
        # SETUP BASH LINKS
        ln -f -s "$_BASH_BINPATH" "${_CJDSCRIPT_HOME}/bin/bash"
        ln -f -s "$_BASH_BINPATH" "${_CJDSCRIPT_HOME}/bin/sh"
        ln -f -s "$_BASH_BINPATH" "${_CJDSCRIPT_HOME}/bin/sh -e"

        # SETUP BASH SCRIPTS
        for _BASH_SCRIPTNAME in ${_BASH_SCRIPTS[@]}; do
            if [ -f "${_CJDSCRIPT_HOME}/download/cjdns/contrib/bash/${_BASH_SCRIPTNAME}" ]; then
                ln -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/bash/${_BASH_SCRIPTNAME}" .
            elif [ -f "${_CJDSCRIPT_HOME}/download/cjdns/contrib/android/${_BASH_SCRIPTNAME}" ]; then
                ln -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/android/${_BASH_SCRIPTNAME}" .
            else
                echo "==> Warning: ${_BASH_SCRIPTNAME} does not exist and won't be installed"
            fi
        done
    else
        echo "==> Warning: Not including bash scripts (bash is not available)"
    fi
}

# NODE SETUP FUNCTION (triggered by setup_scripts)
function setup_node {
    _NODEJS_BINPATH=$(type -P node)
    [[ -z "$_NODEJS_BINPATH" ]] && _NODEJS_BINPATH=$(type -P nodejs)
    if [ -n "$_NODEJS_BINPATH" ]; then
        # SETUP NODEJS LINKS
        ln -s "$_NODEJS_BINPATH" "${_CJDSCRIPT_HOME}/bin/node"
        ln -s "$_NODEJS_BINPATH" "${_CJDSCRIPT_HOME}/bin/nodejs"

        # INSTALL NODEJS LIBRARIES
        ln -f -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/nodejs/tools/lib" .
        ln -f -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/nodejs/cjdnsadmin" ..

        # SETUP NODEJS SCRIPTS
        for _NODEJS_SCRIPTNAME in ${_NODEJS_SCRIPTS[@]}; do
            [[ -f "${_CJDSCRIPT_HOME}/download/cjdns/contrib/nodejs/tools/${_NODEJS_SCRIPTNAME}" ]] \
                && ln -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/nodejs/tools/${_NODEJS_SCRIPTNAME}" . \
                || echo "==> Warning: ${_NODEJS_SCRIPTNAME} does not exist and won't be installed"
        done
    else
        echo "==> Warning: Not including node.js scripts (node/nodejs is not available)"
    fi
}

# BINARY SETUP FUNCTION (triggered by setup_scripts)
function setup_binaries {
    if [ -f "${_CJDSCRIPT_HOME}/bin/python2" -a -f "${_CJDSCRIPT_HOME}/bin/node" ]; then
        # BUILD CJDNS
        cd ${_CJDSCRIPT_HOME}/download/cjdns
        echo "==> Building..."
        eval sh "do" $QUIET

        cd "${_CJDSCRIPT_HOME}/bin"
        for _CJDNS_BINARYNAME in ${_BINARIES[@]}; do
            [[ -f "${_CJDSCRIPT_HOME}/download/cjdns/${_CJDNS_BINARYNAME}" ]] \
                && ln -s "${_CJDSCRIPT_HOME}/download/cjdns/${_CJDNS_BINARYNAME}" . \
                || echo "==> Warning: ${_CJDNS_BINARYNAME} does not exist and won't be installed"
        done
    else
        echo "==> Warning: Not building binaries (python2 is not available)"
    fi
}

# MAIN SETUP FUNCTION: CONFIGURES _CJDSCRIPT_HOME AND RUN SETUP FUNCTIONS (cjdscript -u | --update | -v | verbose-update)
function setup_scripts {
    echo "==> Setting up configuration directory..."

    # CLONE OR UPDATE THE CJDNS REPO
    [[ ! -d "${_CJDSCRIPT_HOME}/bin" ]] && install -d "${_CJDSCRIPT_HOME}/download"
    if [ ! -d "${_CJDSCRIPT_HOME}/download/cjdns" ]; then
        cd "${_CJDSCRIPT_HOME}/download"
        echo "==> Cloning repo..."
        eval git clone "${_CJDNS_REPO}" $QUIET
    else
        cd "${_CJDSCRIPT_HOME}/download/cjdns"
        echo "==> Updating repo..."
        eval git reset --hard $QUIET
        eval git clean -dxf $QUIET
        eval git pull $QUIET
    fi

    # DELETE AND REMAKE THE BIN AND LIB DIRECTORIES IF THEY EXIST
    [[ -d "${_CJDSCRIPT_HOME}/bin" ]] && rm -rf "${_CJDSCRIPT_HOME}/bin"
    [[ -d "${_CJDSCRIPT_HOME}/lib" ]] && rm -rf "${_CJDSCRIPT_HOME}/lib"
    install -d "${_CJDSCRIPT_HOME}/bin"
    install -d "${_CJDSCRIPT_HOME}/lib"
    cd "${_CJDSCRIPT_HOME}/bin"

    # RUN SETUP FUNCTIONS
    echo "==> Configuring executables and scripts..."
    setup_bash
    setup_node
    setup_python2
    setup_binaries

    # UPDATE DIRECTORY VERSION
    echo "$_DIRVERSION" > "${_CJDSCRIPT_HOME}/.dirver"

    # OUTPUT INFORMATION, RUN HELP AND EXIT
    echo -e "==> Finished update!\n"
    echo "==> The cjdscript directory is: ${_CJDSCRIPT_HOME}"
    cjdscript_help
}

# FUNCTION TO LIST SCRIPTS (cjdscript -l | --list)
function list_scripts {
    SCRIPTS_PER_LINE=4
    echo

    # LIST BASH SCRIPTS
    if [ -f "${_CJDSCRIPT_HOME}/bin/bash" ]; then
        echo -n -e "BASH:\n "
        COUNT=0
        for _BASH_SCRIPTNAME in ${_BASH_SCRIPTS[@]}; do
            if [ "$COUNT" = "$SCRIPTS_PER_LINE" ]; then
                COUNT=1
                echo -e -n "\n "
            else
                COUNT=$(expr $COUNT + 1)
            fi
            [[ -f "${_CJDSCRIPT_HOME}/bin/${_BASH_SCRIPTNAME}" ]] \
                && echo -n -e " ${_BASH_SCRIPTNAME}"
        done
        echo -e "\n"
    fi

    # LIST NODEJS SCRIPTS
    if [ $(type -P node) ]; then
        echo -n -e "NODEJS:\n "
        COUNT=0
        for _NODEJS_SCRIPTNAME in ${_NODEJS_SCRIPTS[@]}; do
            if [ "$COUNT" = "$SCRIPTS_PER_LINE" ]; then
                COUNT=1
                echo -e -n "\n "
            else
                COUNT=$(expr $COUNT + 1)
            fi
            [[ -f "${_CJDSCRIPT_HOME}/bin/${_NODEJS_SCRIPTNAME}" ]] \
                && echo -n -e " ${_NODEJS_SCRIPTNAME}"
        done
        echo -e "\n"
    fi

    # LIST PYTHON2 SCRIPTS
    if [ -f "${_CJDSCRIPT_HOME}/bin/python2" ]; then
        echo -n -e "PYTHON2:\n "
        COUNT=0
        for _PYTHON2_SCRIPTNAME in ${_PYTHON2_SCRIPTS[@]}; do
            if [ "$COUNT" = "$SCRIPTS_PER_LINE" ]; then
                COUNT=1
                echo -e -n "\n "
            else
                COUNT=$(expr $COUNT + 1)
            fi
            [[ -f "${_CJDSCRIPT_HOME}/bin/${_PYTHON2_SCRIPTNAME}" ]] \
                && echo -n -e " ${_PYTHON2_SCRIPTNAME}"
        done
        echo -e "\n"
    fi

    # LIST CJDNS BINARIES
    if [ -f "${_CJDSCRIPT_HOME}/bin/cjdroute" ]; then
        echo -n -e "BINARIES:\n "
        COUNT=0
        for CJDNS_BINARYNAME in ${_BINARIES[@]}; do
            if [ "$COUNT" = "$SCRIPTS_PER_LINE" ]; then
                COUNT=1
                echo -e -n "\n "
            else
                COUNT=$(expr $COUNT + 1)
            fi
            [[ -f "${_CJDSCRIPT_HOME}/bin/${CJDNS_BINARYNAME}" ]] \
                && echo -n -e " ${CJDNS_BINARYNAME}"
        done
        echo -e "\n"
    fi
}

# FUNCTION TO OUTPUT HELP INFORMATION (cjdscript -h | --help)
function cjdscript_help {
    echo -e "\nUSAGE:\n  ${APPNAME} [OPTION]\n  ${APPNAME} [SCRIPTNAME] [OPTION] [OPTION...]\n"
    echo "OPTIONS:"
    echo -e "  -u | --update: Update/setup symlinks, libs and scripts"
    echo -e "  -v | --verbose-update: Update/setup with verbose output"
    echo -e "  -l | --list: Lists available scripts"
    echo -e "  -h | --help: Show this help\n"
}

# FAIL IF NO ARGUMENTS ARE GIVEN
if [ -z "$1" ]; then
    echo -e "==> Error: ${APPNAME} must be run with a valid command"
    cjdscript_help
    exit 1
fi

# PARSE ARGUMENTS
case "$1" in
    -h|--help)
        cjdscript_help
        ;;
    -l|--list)
        list_scripts
        ;;
    -u|--update)
        setup_scripts
        exit 0
        ;;
    -v|--verbose-update)
        unset QUIET
        setup_scripts
        exit 0
        ;;
    *)
        # PERFORM UPDATE IF NECESSARY
        if [ ! -d "${_CJDSCRIPT_HOME}/download/cjdns" ] \
            || [ ! -d "${_CJDSCRIPT_HOME}/cjdnsadmin" ] \
            || [ ! -d "${_CJDSCRIPT_HOME}/lib/python2.7/site-packages/cjdnsadmin" ] \
            || [ ! -d "${_CJDSCRIPT_HOME}/bin" ] \
            || [ ! -f "${_CJDSCRIPT_HOME}/.dirver" ] \
            || [ ! $(cat "${_CJDSCRIPT_HOME}/.dirver") = "$_DIRVERSION" ]; then
                echo "==> Warning: The configuration directory needs to be updated..."
                setup_scripts
        fi

        # RUN COMMAND
        if [[ -f "${_CJDSCRIPT_HOME}/bin/${1}" ]]; then
            "$@"
        else
            echo -e "==> Error: ${1} is not a valid command\n"
            cjdscript_help
            exit 1
        fi
        ;;
esac
exit 0
