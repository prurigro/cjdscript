#!/usr/bin/env bash

_CJDSCRIPT_HOME="${HOME}/.cjdscript"

_CJDNS_REPO="https://github.com/cjdelisle/cjdns.git"
# _PYTHON_PKG=('1.x' 'sha512sum' 'url' 'name')

_DIRVERSION="2"

_BASH_SCRIPTS=('ip6tables.sh')
_BINARIES=('cjdroute' 'makekeys' 'privatetopublic' 'publictoip6' 'sybilsim')
_NODEJS_SCRIPTS=('dumptable.js' 'getLinks.js' 'netwalker.js' 'pathfinderTree.js' 'peerStats.js' 'pingAll.js' 'pingflood.js')
_PYTHON2_SCRIPTS=('cjdnsadminmaker.py' 'cjdnslog' 'dumpgraph' 'dumptable' 'dynamicEndpoints.py' 'findnodes' 'graphStats' 'peerStats' 'pingAll.py' 'pktoip6' 'searches' 'sessionStats' 'trashroutes')

export PATH="${_CJDSCRIPT_HOME}/bin:${PATH}"
export PYTHON_PATH="${_CJDSCRIPT_HOME}/lib/python2.7/site-packages"

function python2_pkg {
    PKG_NAME=$(echo "$1" | sed 's|.*/||g')
    PKG_DIR="${_CJDSCRIPT_HOME}/download/python2"
    PKG_VER="$2"
    PKG_URL="${4}-${PKG_VER}.tar.gz"
    PKG_SUM="$3"

    [[ -d "${PKG_DIR}" ]] || install -d "${PKG_DIR}"
    [[ -d "${PKG_DIR}/${PKG_NAME}" ]] && rm -rf "${PKG_DIR}/${PKG_NAME}"
    [[ -f "${PKG_DIR}/${PKG_NAME}-${PKG_VER}.tar.gz" ]] || curl -sSL "$PKG_URL" > "${PKG_DIR}/${PKG_NAME}-${PKG_VER}.tar.gz"

    if [[ $(sha512sum "${PKG_DIR}/${PKG_NAME}-${PKG_VER}.tar.gz" | sed 's|\ .*||') = $PKG_SUM ]]; then
        install -d "${PKG_DIR}/${PKG_NAME}"
        tar zxf "${PKG_DIR}/${PKG_NAME}-${PKG_VER}.tar.gz" --strip-components 1 -C "${PKG_DIR}/${PKG_NAME}"
    else
        echo "Error: invalid checksum for python2 decorator"
        rm "${PKG_DIR}/${PKG_NAME}-${PKG_VER}.tar.gz"
        return 1
    fi
    python "${PKG_DIR}/${PKG_NAME}/setup.py" install --prefix="$PYTHON_PATH"
    [[ -d "${PKG_DIR}/${PKG_NAME}" ]] && rm -rf "${PKG_DIR}/${PKG_NAME}"

    return 0
}

function setup_python {
    # CREATE LOCAL LINKS TO PYTHON VERSIONS WITH NAMES STANDARD TO THIS SCRIPT
    _PYTHON_BINARYNAMES=('python' 'python2' 'python3')
    for _PYTHON_TESTNAME in ${_PYTHON_BINARYNAMES[@]}; do
        _PYTHON_TESTPATH=$(type -P $_PYTHON_TESTNAME)
        if [ ! -z "${_PYTHON_TESTPATH}" ]; then
            ln -f -s "${_PYTHON_TESTPATH}" "${_CJDSCRIPT_HOME}/bin/python$("${_PYTHON_TESTPATH}" -V 2>&1 | sed 's/^[^0-9]*//;s/\..*//')"
        fi
    done

    [[ -d "$PYTHON_PATH" ]] && rm -rf "$PYTHON_PATH"
    install -d "$PYTHON_PATH"

    # PYTHON3 (ONLY RUN IF PYTHON3 EXISTS)
    if [ -h "${_CJDSCRIPT_HOME}/bin/python3" ]; then
        # REMOVE PYTHON3 SINCE NO SCRIPTS USE IT
        rm "${_CJDSCRIPT_HOME}/bin/python3"
    fi

    # PYTHON2 (ONLY RUN IF PYTHON2 EXISTS)
    if [ -f "${_CJDSCRIPT_HOME}/bin/python2" ]; then
        # INSTALL PYTHON2 AS PYTHON
        ln -f -s "${_CJDSCRIPT_HOME}/bin/python2" "${_CJDSCRIPT_HOME}/bin/python"

        # INSTALL PYTHON2 LIBRARIES
        [[ -d "${_CJDSCRIPT_HOME}/download/python2" ]] && rm -rf "${_CJDSCRIPT_HOME}/download/python2"
        ln -f -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/python/cjdnsadmin" "${PYTHON_PATH}/cjdnsadmin"
        # python2_pkg "${PYTHON_PKG[0]}" "${PYTHON_PKG[0]}" "${PYTHON_PKG[1]}" "${PYTHON_PKG[2]}" "${PYTHON_PKG[3]}"

        # INSTALL PYTHON2 SCRIPTS
        for _PYTHON2_SCRIPTNAME in ${_PYTHON2_SCRIPTS[@]}; do
            ln -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/python/${_PYTHON2_SCRIPTNAME}" .
        done
    else
        echo "Not including python2 scripts (python2 is not available)"
    fi
}

function setup_bash {
    _BASH_TESTPATH=$(type -P bash)
    if [ ! -z "${_BASH_TESTPATH}" ]; then
        ln -f -s "${_BASH_TESTPATH}" "${_CJDSCRIPT_HOME}/bin/bash$("${_BASH_TESTPATH}" -V 2>&1 | sed 's/^[^0-9]*//;s/\..*//')"
    fi

    if [ -f "${_CJDSCRIPT_HOME}/bin/bash" ]; then
        ln -f -s "${_CJDSCRIPT_HOME}/bin/bash" "${_CJDSCRIPT_HOME}/bin/sh"
        ln -f -s "${_CJDSCRIPT_HOME}/bin/bash" "${_CJDSCRIPT_HOME}/bin/sh -e"
        for _BASH_SCRIPTNAME in ${_BASH_SCRIPTS[@]}; do
            ln -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/bash/${_BASH_SCRIPTNAME}" .
        done
    else
        echo "Not including bash scripts (bash is not available)"
    fi
}

function setup_node {
    if [ $(type -P node) ]; then
        ln -f -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/nodejs/tools/lib" .
        ln -f -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/nodejs/cjdnsadmin" ..
        for _SCRIPT in ${_NODEJS_SCRIPTS[@]}; do
            if [ -f "${_CJDSCRIPT_HOME}/download/cjdns/contrib/nodejs/tools/${_SCRIPT}" ]; then
                ln -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/nodejs/tools/${_SCRIPT}" .
            fi
        done
    else
        echo "Not including node.js scripts (node is not available)"
    fi
}

function setup_binaries {
    if [ -f "${_CJDSCRIPT_HOME}/bin/python" ]; then
        type -P node >/dev/null 2>&1 || (echo "Not building binaries (node.js is not available)" && return 1)
        sh -c "cd ${_CJDSCRIPT_HOME}/download/cjdns; ./clean"
        sh -c "cd ${_CJDSCRIPT_HOME}/download/cjdns; ./do"

        for _BINARY in ${_BINARIES[@]}; do
            if [ -f "${_CJDSCRIPT_HOME}/download/cjdns/${_BINARY}" ]; then
                ln -s "${_CJDSCRIPT_HOME}/download/cjdns/${_BINARY}" .
            fi
        done
    else
        echo "Not building binaries (python2 is not available)"
    fi
}

function setup_scripts {
    rm -rf "${_CJDSCRIPT_HOME}/bin"
    install -d "${_CJDSCRIPT_HOME}/download"

    if [ ! -d "${_CJDSCRIPT_HOME}/download/cjdns" ]; then
        cd "${_CJDSCRIPT_HOME}/download"
        git clone "${_CJDNS_REPO}"
    else
        cd "${_CJDSCRIPT_HOME}/download/cjdns"
        echo "Updating repo..."
        git pull
    fi

    install -d "${_CJDSCRIPT_HOME}/bin"
    cd "${_CJDSCRIPT_HOME}/bin"

    setup_bash
    setup_node
    setup_python
    setup_binaries

    echo "$_DIRVERSION" > "${_CJDSCRIPT_HOME}/.dirver"
    echo -e "\nFinished setting up the configuration directory @ ${_CJDSCRIPT_HOME}."
    echo -e "\nYou can now use cjdscript with the following syntax:"

    cjdscript_help
}

function list_scripts {
    echo "Available Scripts:"

    # BASH
    if [ -f "${_CJDSCRIPT_HOME}/bin/bash" ]; then
        echo -n -e "\tBASH:"
        for _BASH_SCRIPTNAME in ${_BASH_SCRIPTS[@]}; do
            [[ -f "${_CJDSCRIPT_HOME}/bin/${_BASH_SCRIPTNAME}" ]] && echo -n -e " ${_BASH_SCRIPTNAME}"
        done
        echo
    fi

    # NODEJS
    if [ $(type -P node) ]; then
        echo -n -e "\tNODE:"
        for _NODEJS_SCRIPTNAME in ${_NODEJS_SCRIPTS[@]}; do
            [[ -f "${_CJDSCRIPT_HOME}/bin/${_NODEJS_SCRIPTNAME}" ]] && echo -n -e " ${_NODEJS_SCRIPTNAME}"
        done
        echo
    fi

    # PYTHON2
    if [ -f "${_CJDSCRIPT_HOME}/bin/python2" ]; then
        echo -n -e "\tPYTHON2:"
        for _PYTHON2_SCRIPTNAME in ${_PYTHON2_SCRIPTS[@]}; do
            [[ -f "${_CJDSCRIPT_HOME}/bin/${_PYTHON2_SCRIPTNAME}" ]] && echo -n -e " ${_PYTHON2_SCRIPTNAME}"
        done
        echo
    fi

    # BINARIES
    if [ -f "${_CJDSCRIPT_HOME}/bin/cjdroute" ]; then
        echo -n -e "\tBINARIES:"
        for _BINARY in ${_BINARIES[@]}; do
            [[ -f "${_CJDSCRIPT_HOME}/bin/${_BINARY}" ]] && echo -n -e " ${_BINARY}"
        done
        echo -e "\n"
    fi
}

function cjdscript_help {
    echo -e "Usage: 'cjdscript argument' --or-- 'cjdscript scriptname argument(s)'\n"
    echo "Arguments:"
    echo -e "\t-h or --help: Show this help"
    echo -e "\t-u or --update: Updates scripts and symlinks"
    echo -e "\t-l or --list: Lists available scripts\n"
    list_scripts
}

# STARTUP
if [ "${1}" = "--list" -o "${1}" = "-l" ]; then
    list_scripts
elif [ "${1}" = "--update" -o "${1}" = "-u" ]; then
    setup_scripts
elif [ ! -d "${_CJDSCRIPT_HOME}/bin" ]; then
    setup_scripts
elif [ ! -f "${_CJDSCRIPT_HOME}/.dirver" ]; then
    setup_scripts
elif [ ! $(cat "${_CJDSCRIPT_HOME}/.dirver") = $_DIRVERSION ]; then
    setup_scripts
elif [ "${1}" = "--help" -o "${1}" = "-h" -o -z "${1}" ]; then
    cjdscript_help
elif [ ! -z "${1}" -a $(echo "${1}" | grep -E -c "^-") = 0 ]; then
    if [[ -f "${_CJDSCRIPT_HOME}/bin/${1}" ]]; then
        "$@"
    else
        echo -e "Error: \"${1}\" is not a valid command\n"
        cjdscript_help
    fi
else
    echo -e "Error: \"$@\" is not a valid argument\n"
    cjdscript_help
fi
