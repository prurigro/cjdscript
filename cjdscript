#!/usr/bin/env bash

_CJDSCRIPT_HOME="${HOME}/.cjdscript"
_CJDNS_REPO="https://github.com/cjdelisle/cjdns.git"

_DIRVERSION="3"

_BASH_SCRIPTS=('cjdroid-build.sh' 'ip6tables.sh' 'run-cjdroute.bash')
_BINARIES=('cjdroute' 'makekeys' 'privatetopublic' 'publictoip6' 'sybilsim')
_NODEJS_SCRIPTS=('dumptable.js' 'getLinks.js' 'netwalker.js' 'pathfinderTree.js' 'peerStats.js' 'pingAll.js' 'pingflood.js')
_PYTHON2_SCRIPTS=('cjdnsadminmaker.py' 'cjdnslog' 'drawgraph' 'dumpgraph' 'dumptable' 'dynamicEndpoints.py' 'findnodes' 'graphStats' 'peerStats' 'pingAll.py' 'pktoip6' 'searches' 'sessionStats' 'trashroutes')

APPNAME="${0##*/}"
export PATH="${_CJDSCRIPT_HOME}/bin:${PATH}"
export PYTHON2_PATH="${_CJDSCRIPT_HOME}/lib/python2.7/site-packages"

function setup_python {
    _PYTHON2_BINPATH=$(type -P python2)

    if [ -n "$_PYTHON2_BINPATH" ]; then
        # SETUP PYTHON LINKS
        ln -f -s "$_PYTHON2_BINPATH" "${_CJDSCRIPT_HOME}/bin/python2"
        ln -f -s python2 "${_CJDSCRIPT_HOME}/bin/python"

        # INSTALL CJDNS PYTHON2 LIBRARIES
        [[ -d "$PYTHON2_PATH" ]] && rm -rf "$PYTHON2_PATH"
        install -d "$PYTHON2_PATH"
        [[ -d "${_CJDSCRIPT_HOME}/download/python2" ]] && rm -rf "${_CJDSCRIPT_HOME}/download/python2"
        ln -f -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/python/cjdnsadmin" "${PYTHON2_PATH}/cjdnsadmin"

        # INSTALL PYTHON2 SCRIPTS
        cd "${_CJDSCRIPT_HOME}/bin"
        for _PYTHON2_SCRIPTNAME in ${_PYTHON2_SCRIPTS[@]}; do
            [[ -f "${_CJDSCRIPT_HOME}/download/cjdns/contrib/python/${_PYTHON2_SCRIPTNAME}" ]] \
                && ln -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/python/${_PYTHON2_SCRIPTNAME}" . \
                || echo "==> Warning: ${_PYTHON2_SCRIPTNAME} does not exist and won't be installed"
        done
    else
        echo "==> Warning: Not including python2 scripts (python2 is not available)"
    fi
}

function setup_bash {
    _BASH_BINPATH=$(type -P bash)

    if [[ -n "$_BASH_BINPATH" ]]; then
        # SETUP BASH LINKS
        ln -f -s "$_BASH_BINPATH" "${_CJDSCRIPT_HOME}/bin/bash"
        ln -f -s bash "${_CJDSCRIPT_HOME}/bin/sh"
        ln -f -s bash "${_CJDSCRIPT_HOME}/bin/sh -e"

        # SETUP BASH SCRIPTS
        for _BASH_SCRIPTNAME in ${_BASH_SCRIPTS[@]}; do
            if [ -f "${_CJDSCRIPT_HOME}/download/cjdns/contrib/bash/${_BASH_SCRIPTNAME}" ]; then
                ln -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/bash/${_BASH_SCRIPTNAME}" .
            elif [ -f "${_CJDSCRIPT_HOME}/download/cjdns/contrib/android/${_BASH_SCRIPTNAME}" ]; then
                ln -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/android/${_BASH_SCRIPTNAME}" .
            else
                echo "==> Warning: ${_BASH_SCRIPTNAME} does not exist and won't be installed"
            fi
        done
    else
        echo "==> Warning: Not including bash scripts (bash is not available)"
    fi
}

function setup_node {
    _NODEJS_BINPATH=$(type -P node)
    [[ -z "$_NODEJS_BINPATH" ]] && _NODEJS_BINPATH=$(type -P nodejs)

    if [ -n "$_NODEJS_BINPATH" ]; then
        # SETUP NODEJS LINKS
        ln -s "$_NODEJS_BINPATH" "${_CJDSCRIPT_HOME}/bin/node"
        ln -s node "${_CJDSCRIPT_HOME}/bin/nodejs"

        # INSTALL NODEJS LIBRARIES
        ln -f -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/nodejs/tools/lib" .
        ln -f -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/nodejs/cjdnsadmin" ..

        # SETUP NODEJS SCRIPTS
        for _NODEJS_SCRIPTNAME in ${_NODEJS_SCRIPTS[@]}; do
            [[ -f "${_CJDSCRIPT_HOME}/download/cjdns/contrib/nodejs/tools/${_NODEJS_SCRIPTNAME}" ]] \
                && ln -s "${_CJDSCRIPT_HOME}/download/cjdns/contrib/nodejs/tools/${_NODEJS_SCRIPTNAME}" . \
                || echo "==> Warning: ${_NODEJS_SCRIPTNAME} does not exist and won't be installed"
        done
    else
        echo "==> Warning: Not including node.js scripts (node/nodejs is not available)"
    fi
}

function setup_binaries {
    if [ -f "${_CJDSCRIPT_HOME}/bin/python2" -a -f "${_CJDSCRIPT_HOME}/bin/node" ]; then
        # BUILD CJDNS
        pushd ${_CJDSCRIPT_HOME}/download/cjdns >/dev/null 2>&1
        echo "==> Building..."
        sh "do" >/dev/null 2>&1
        popd >/dev/null 2>&1

        for _CJDNS_BINARYNAME in ${_BINARIES[@]}; do
            [[ -f "${_CJDSCRIPT_HOME}/download/cjdns/${_CJDNS_BINARYNAME}" ]] \
                && ln -s "${_CJDSCRIPT_HOME}/download/cjdns/${_CJDNS_BINARYNAME}" . \
                || echo "==> Warning: ${_CJDNS_BINARYNAME} does not exist and won't be installed"
        done
    else
        echo "==> Warning: Not building binaries (python2 is not available)"
    fi
}

function setup_scripts {
    echo "==> Setting up configuration directory..."

    [[ ! -d "${_CJDSCRIPT_HOME}/bin" ]] && install -d "${_CJDSCRIPT_HOME}/download"
    if [ ! -d "${_CJDSCRIPT_HOME}/download/cjdns" ]; then
        cd "${_CJDSCRIPT_HOME}/download"
        echo "\n==> Cloning repo..."
        git clone "${_CJDNS_REPO}" >/dev/null 2>&1
    else
        cd "${_CJDSCRIPT_HOME}/download/cjdns"
        echo -e "==> Updating repo..."
        git reset --hard >/dev/null 2>&1
        git clean -dxf >/dev/null 2>&1
        git pull >/dev/null 2>&1
    fi

    # DELETE AND REMAKE THE BIN AND LIB DIRECTORIES IF THEY EXIST
    [[ -d "${_CJDSCRIPT_HOME}/bin" ]] && rm -rf "${_CJDSCRIPT_HOME}/bin"
    [[ -d "${_CJDSCRIPT_HOME}/lib" ]] && rm -rf "${_CJDSCRIPT_HOME}/lib"
    install -d "${_CJDSCRIPT_HOME}/bin"
    install -d "${_CJDSCRIPT_HOME}/lib"
    cd "${_CJDSCRIPT_HOME}/bin"

    # RUN SETUP FUNCTIONS
    echo "==> Configuring executables and scripts..."
    setup_bash
    setup_node
    setup_python
    setup_binaries

    # UPDATE DIRECTORY VERSION
    echo "$_DIRVERSION" > "${_CJDSCRIPT_HOME}/.dirver"

    # OUTPUT INFORMATION, RUN HELP AND EXIT
    echo -e "==> Finished update!\n"
    echo "==> The cjdscript directory is: ${_CJDSCRIPT_HOME}"
    cjdscript_help
}

function list_scripts {
    SCRIPTS_PER_LINE=4
    echo

    # LIST BASH SCRIPTS
    if [ -f "${_CJDSCRIPT_HOME}/bin/bash" ]; then
        echo -n -e "BASH:\n "
        COUNT=0
        for _BASH_SCRIPTNAME in ${_BASH_SCRIPTS[@]}; do
            if [ "$COUNT" = "$SCRIPTS_PER_LINE" ]; then
                COUNT=1
                echo -e -n "\n "
            else
                COUNT=$(expr $COUNT + 1)
            fi
            [[ -f "${_CJDSCRIPT_HOME}/bin/${_BASH_SCRIPTNAME}" ]] \
                && echo -n -e " ${_BASH_SCRIPTNAME}"
        done
        echo -e "\n"
    fi

    # LIST NODEJS SCRIPTS
    if [ $(type -P node) ]; then
        echo -n -e "NODEJS:\n "
        COUNT=0
        for _NODEJS_SCRIPTNAME in ${_NODEJS_SCRIPTS[@]}; do
            if [ "$COUNT" = "$SCRIPTS_PER_LINE" ]; then
                COUNT=1
                echo -e -n "\n "
            else
                COUNT=$(expr $COUNT + 1)
            fi
            [[ -f "${_CJDSCRIPT_HOME}/bin/${_NODEJS_SCRIPTNAME}" ]] \
                && echo -n -e " ${_NODEJS_SCRIPTNAME}"
        done
        echo -e "\n"
    fi

    # LIST PYTHON2 SCRIPTS
    if [ -f "${_CJDSCRIPT_HOME}/bin/python2" ]; then
        echo -n -e "PYTHON2:\n "
        COUNT=0
        for _PYTHON2_SCRIPTNAME in ${_PYTHON2_SCRIPTS[@]}; do
            if [ "$COUNT" = "$SCRIPTS_PER_LINE" ]; then
                COUNT=1
                echo -e -n "\n "
            else
                COUNT=$(expr $COUNT + 1)
            fi
            [[ -f "${_CJDSCRIPT_HOME}/bin/${_PYTHON2_SCRIPTNAME}" ]] \
                && echo -n -e " ${_PYTHON2_SCRIPTNAME}"
        done
        echo -e "\n"
    fi

    # LIST CJDNS BINARIES
    if [ -f "${_CJDSCRIPT_HOME}/bin/cjdroute" ]; then
        echo -n -e "BINARIES:\n "
        COUNT=0
        for CJDNS_BINARYNAME in ${_BINARIES[@]}; do
            if [ "$COUNT" = "$SCRIPTS_PER_LINE" ]; then
                COUNT=1
                echo -e -n "\n "
            else
                COUNT=$(expr $COUNT + 1)
            fi
            [[ -f "${_CJDSCRIPT_HOME}/bin/${CJDNS_BINARYNAME}" ]] \
                && echo -n -e " ${CJDNS_BINARYNAME}"
        done
        echo -e "\n"
    fi
}

function cjdscript_help {
    echo -e "\nUSAGE:\n  ${APPNAME} [OPTION]\n  ${APPNAME} [SCRIPTNAME] [OPTION] [OPTION...]\n"
    echo "OPTIONS:"
    echo -e "  -h | --help: Show this help"
    echo -e "  -u | --update: Updates scripts and symlinks"
    echo -e "  -l | --list: Lists available scripts\n"
}

# FAIL IF NO ARGUMENTS ARE GIVEN
if [ -z "$1" ]; then
    echo -e "==> Error: ${APPNAME} must be run with a valid command"
    cjdscript_help
    exit 1
fi

# PARSE ARGUMENTS
case "$1" in
    -h|--help)
        cjdscript_help
        ;;
    -l|--list)
        list_scripts
        ;;
    -u|--update)
        setup_scripts
        exit 0
        ;;
    *)
        # PERFORM UPDATE IF NECESSARY
        if [ ! -d "${_CJDSCRIPT_HOME}/download/cjdns" ] \
            || [ ! -d "${_CJDSCRIPT_HOME}/cjdnsadmin" ] \
            || [ ! -d "${_CJDSCRIPT_HOME}/lib/python2.7/site-packages/cjdnsadmin" ] \
            || [ ! -d "${_CJDSCRIPT_HOME}/bin" ] \
            || [ ! -f "${_CJDSCRIPT_HOME}/.dirver" ] \
            || [ ! $(cat "${_CJDSCRIPT_HOME}/.dirver") = "$_DIRVERSION" ]; then
                echo "==> Warning: The configuration directory needs to be updated..."
                setup_scripts
        fi

        # RUN COMMAND
        if [[ -f "${_CJDSCRIPT_HOME}/bin/${1}" ]]; then
            "$@"
        else
            echo -e "==> Error: ${1} is not a valid command\n"
            cjdscript_help
            exit 1
        fi
        ;;
esac
exit 0
